[{"C:\\xampp\\htdocs\\indexation-client-side\\src\\index.js":"1","C:\\xampp\\htdocs\\indexation-client-side\\src\\App.js":"2","C:\\xampp\\htdocs\\indexation-client-side\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\indexation-client-side\\src\\FireStore.js":"4","C:\\xampp\\htdocs\\indexation-client-side\\src\\GetDataFromApi.js":"5","C:\\xampp\\htdocs\\indexation-client-side\\src\\fonctions.js":"6","C:\\xampp\\htdocs\\indexation-client-side\\src\\Searchbar.js":"7","C:\\xampp\\htdocs\\indexation-client-side\\src\\Result.js":"8","C:\\xampp\\htdocs\\indexation-client-side\\src\\WordCloud.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1458,"mtime":1609116010532,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":728,"mtime":1608927461647,"results":"14","hashOfConfig":"11"},{"size":2172,"mtime":1608956654570,"results":"15","hashOfConfig":"11"},{"size":6815,"mtime":1609096878926,"results":"16","hashOfConfig":"11"},{"size":848,"mtime":1609097472029,"results":"17","hashOfConfig":"11"},{"size":3425,"mtime":1609115679166,"results":"18","hashOfConfig":"11"},{"size":414,"mtime":1609102566462,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"b364eo",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\indexation-client-side\\src\\index.js",[],["41","42"],"C:\\xampp\\htdocs\\indexation-client-side\\src\\App.js",["43","44","45"],"C:\\xampp\\htdocs\\indexation-client-side\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\indexation-client-side\\src\\FireStore.js",[],"C:\\xampp\\htdocs\\indexation-client-side\\src\\GetDataFromApi.js",["46"],"import React, {useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport firebase from \"./FireStore\";\r\nimport * as Fonctions from './fonctions'\r\nconst endPoint=\"http://localhost/indexation_second_version/\"\r\nfunction App() {\r\n\r\n  useEffect(()=>{\r\n    // get array of objects from api\r\n    axios.get(endPoint)\r\n    .then(response=>{\r\n      response.data.forEach(file => {\r\n        console.log(file.title)\r\n        // post path of file to bdd\r\n        firebase.firestore().collection(\"Files\")\r\n        .add({file:file.file})\r\n        // if post to bdd succed \r\n        .then(res=>{\r\n        // add props of each file\r\n        firebase.firestore().collection(\"Props\") \r\n        .add ({title:file.title,description:file.descriptions,keywords:file.keywords,file:res.id})\r\n        .then(e=>console.log(e))\r\n        .catch(err=>console.log(err))\r\n        // end of ading porops of each file \r\n        // concat words of body and head\r\n        const object={}\r\n        for (const key in file.head){\r\n          object[key]=file.head[key]\r\n        }\r\n        for (const key2 in file.body){\r\n          if(object[key2]>0){\r\n            console.log(key2+\" => \"+object[key2])\r\n            object[key2]=object[key2]+file.body[key2]\r\n          }else{\r\n            object[key2]=file.body[key2]\r\n          }\r\n        }  \r\n        ////////////////////////// \r\n        // post wods with her weight to bdd\r\n        for (const key in object){\r\n          firebase.firestore().collection(\"WordsWeights\")\r\n          .add({word:key, letters:Fonctions.soundex(key), weight:object[key], file:res.id})\r\n          .then(res=>console.log((\"le mot avec le poid sont ajoutés avec succès\")))\r\n          .catch(err=>console.log(\"erreur dans le post des mots et leur poids sur la bdd\"))\r\n        }\r\n        })\r\n        //////////////////////////\r\n        // if post fail \r\n        .catch(err=>console.log(\"erreur dans la demande pour ajouter les fichier dans la base de données\"))\r\n        //fin ajout fichier to bdd\r\n      });      \r\n    })\r\n    .catch(err=>{\r\n      console.log(\"erreur dans la demande au serveur de l'indexation\")\r\n    })\r\n  })\r\n\r\n  return (\r\n   null\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\xampp\\htdocs\\indexation-client-side\\src\\fonctions.js",["47"],"import firebase from './FireStore';\r\n\r\nexport function soundex(sentence) {\r\n  // get length of word \r\n  const length = sentence.length\r\n\r\n  // get the first part of word\r\n  let firstPart = sentence.substr(0, sentence.length / 2) // Gets the first \r\n  // get the second part of word\r\n  let secondPart = sentence.substr(sentence.length / 2, sentence.length) // Gets the socond  \r\n  console.log(firstPart)\r\n  console.log(secondPart)\r\n  const letters = {\r\n    a: { poid: 0, sentencePart: \"\" }, b: { poid: 0, sentencePart: \"\" }, c: { poid: 0, sentencePart: \"\" },\r\n    d: { poid: 0, sentencePart: \"\" }, e: { poid: 0, sentencePart: \"\" }, f: { poid: 0, sentencePart: \"\" },\r\n    g: { poid: 0, sentencePart: \"\" }, h: { poid: 0, sentencePart: \"\" }, i: { poid: 0, sentencePart: \"\" },\r\n    j: { poid: 0, sentencePart: \"\" }, k: { poid: 0, sentencePart: \"\" }, l: { poid: 0, sentencePart: \"\" },\r\n    m: { poid: 0, sentencePart: \"\" }, n: { poid: 0, sentencePart: \"\" }, o: { poid: 0, sentencePart: \"\" },\r\n    p: { poid: 0, sentencePart: \"\" }, q: { poid: 0, sentencePart: \"\" }, r: { poid: 0, sentencePart: \"\" },\r\n    s: { poid: 0, sentencePart: \"\" }, t: { poid: 0, sentencePart: \"\" }, u: { poid: 0, sentencePart: \"\" },\r\n    v: { poid: 0, sentencePart: \"\" }, w: { poid: 0, sentencePart: \"\" }, x: { poid: 0, sentencePart: \"\" },\r\n    y: { poid: 0, sentencePart: \"\" }, z: { poid: 0, sentencePart: \"\" },\r\n  }\r\n  for (let i = 0; i < firstPart.length; i++) {\r\n    letters[firstPart.charAt(i)] = { poid: 0, sentencePart: \"first\" }\r\n  }\r\n  for (let i = 0; i < secondPart.length; i++) {\r\n    if (letters[secondPart.charAt(i)] && letters[secondPart.charAt(i)] === \"first\") {\r\n      letters[secondPart.charAt(i)] = { poid: 0, sentencePart: \"firstsecond\" }\r\n    } else {\r\n      letters[secondPart.charAt(i)] = { poid: 0, sentencePart: \"second\" }\r\n    }\r\n  }\r\n  for (let i = 0; i < firstPart.length; i++) {\r\n    letters[firstPart.charAt(i)][\"poid\"] = letters[firstPart.charAt(i)][\"poid\"] + 1\r\n  }\r\n  for (let i = 0; i < secondPart.length; i++) {\r\n    letters[secondPart.charAt(i)][\"poid\"] = letters[secondPart.charAt(i)][\"poid\"] + 1\r\n  }\r\n  return (letters)\r\n}\r\n\r\nexport function soundex2(someString) {\r\n  // get length of word \r\n  const length = someString.length\r\n\r\n  // get the first part of word\r\n  let firstPart = someString.substr(0, someString.length / 2) // Gets the first \r\n  // get the second part of word\r\n  let secondPart = someString.substr(someString.length / 2, someString.length) // Gets the socond\r\n\r\n  // get letters of the first part of word\r\n  const letters1 = {}\r\n  for (let i = 0; i < firstPart.length; i++) {\r\n    letters1[firstPart.charAt(i)] = 0\r\n  }\r\n  for (let i = 0; i < firstPart.length; i++) {\r\n    letters1[firstPart.charAt(i)] = letters1[firstPart.charAt(i)] + 1\r\n  }\r\n  // get letters of the second part of word\r\n  const letters2 = {}\r\n  for (let i = 0; i < secondPart.length; i++) {\r\n    letters2[secondPart.charAt(i)] = 0\r\n  }\r\n  for (let i = 0; i < secondPart.length; i++) {\r\n    letters2[secondPart.charAt(i)] = letters2[secondPart.charAt(i)] + 1\r\n  }\r\n  return { letters1: letters1, letters2: letters2, length: length }\r\n}\r\nexport function verifyExistenceOfPartInBddWords(obj1, obj2, part) {\r\n  let countLetter = 0\r\n  let countTrueLetter = 0\r\n\r\n  for (const letter in obj1) {\r\n    countLetter = countLetter + 1\r\n    if (obj2.letters[letter].poid > 0 && obj2.letters[letter].sentencePart.includes(part)) {\r\n      countTrueLetter = countTrueLetter + 1\r\n    }\r\n  }\r\n  return countLetter - countTrueLetter\r\n}\r\nexport function firstApproche(requete) {\r\n  let result = []\r\n  firebase.firestore().collection(\"WordsWeights\").get().then(function (querySnapshot) {\r\n    querySnapshot.forEach(function (doc) {\r\n      let nbrMistakes = verifyExistenceOfPartInBddWords(soundex2(requete).letters1, doc.data(), \"first\")\r\n        + verifyExistenceOfPartInBddWords(soundex2(requete).letters2, doc.data(), \"second\")\r\n\r\n      if (nbrMistakes <= Math.abs((requete.length - doc.data().word.length) / 2) && requete.length / doc.data().word.length > 0.6 && requete.length / doc.data().word.length < 1.4) {\r\n        result.push(doc.data())\r\n      }\r\n    });\r\n  });\r\n  return result\r\n}\r\nexport function secondApproche(sentence) {\r\n  let result = []\r\n  // get the first part of word\r\n  let firstPartR = sentence.substr(0, sentence.length / 2) // Gets the first \r\n  // get the second part of word\r\n  let secondPartR = sentence.substr(sentence.length / 2, sentence.length) // Gets the socond  \r\n  firebase.firestore().collection(\"WordsWeights\").get().then(function (querySnapshot) {\r\n    querySnapshot.forEach(function (doc) {\r\n      // get the first part of word\r\n      let firstPartW = doc.data().word.substr(0, doc.data().word.length / 2) // Gets the first \r\n      // get the second part of word\r\n      let secondPartW = doc.data().word.substr(doc.data().word.length / 2, doc.data().word.length) // Gets the socond  \r\n      if ((sentence.includes(firstPartW) || sentence.includes(secondPartW) || doc.data().word.includes(firstPartR) || doc.data().word.includes(secondPartR)) && Math.abs(doc.data().word.length - sentence.length) < 3) {\r\n        result.push(doc.data())\r\n      }\r\n    });\r\n  });\r\n  return result\r\n}\r\nexport function thirdApproche(sentence){\r\n  // get the first part of word\r\n  let firstPartR = sentence.substr(0, sentence.length / 2) // Gets the first \r\n  // get the second part of word\r\n  let secondPartR = sentence.substr(sentence.length / 2, sentence.length) // Gets the socond  \r\n\r\n  firebase.firestore().collection(\"WordsWeights\").get().then(function (querySnapshot) {\r\n    querySnapshot.forEach(function (doc) {\r\n      // get the first part of word\r\n      let firstPartW = doc.data().word.substr(0, doc.data().word.length / 2) // Gets the first \r\n      // get the second part of word\r\n      let secondPartW = doc.data().word.substr(doc.data().word.length / 2, doc.data().word.length) // Gets the socond  \r\n      //count\r\n      let count=0\r\n      for (let i = 0; i < firstPartR.length; i++) {\r\n        if(firstPartW.includes(firstPartR.charAt(i))){\r\n          count=count+1\r\n        }\r\n      }\r\n      for (let i = 0; i < secondPartR.length; i++) {\r\n        if(secondPartW.includes(secondPartR.charAt(i))){\r\n          count=count+1\r\n        }\r\n      }\r\n      \r\n      if(doc.data().word.length-count<3){\r\n        console.log(\"data \"+doc.data().word.length,\"count \"+count,\"request \"+sentence.length)\r\n        console.log(doc.data().word)\r\n      }\r\n\r\n    });\r\n  });\r\n}\r\n/*\r\n        /*<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>*/\r\n","C:\\xampp\\htdocs\\indexation-client-side\\src\\Searchbar.js",["48","49"],"C:\\xampp\\htdocs\\indexation-client-side\\src\\Result.js",[],"C:\\xampp\\htdocs\\indexation-client-side\\src\\WordCloud.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":5,"column":13,"nodeType":"56","messageId":"57","endLine":5,"endColumn":22},{"ruleId":"54","severity":1,"message":"58","line":33,"column":7,"nodeType":"56","messageId":"57","endLine":33,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":52,"column":10,"nodeType":"61","endLine":57,"endColumn":9},{"ruleId":"54","severity":1,"message":"62","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":13},{"ruleId":"54","severity":1,"message":"63","line":5,"column":9,"nodeType":"56","messageId":"57","endLine":5,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":13,"column":11,"nodeType":"61","endLine":13,"endColumn":23},{"ruleId":"64","severity":1,"message":"65","line":13,"column":24,"nodeType":"61","endLine":13,"endColumn":175},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'Fonctions' is defined but never used.","Identifier","unusedVar","'requete' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'React' is defined but never used.","'length' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]